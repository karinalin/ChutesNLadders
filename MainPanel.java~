/*
 */

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;


public class MainPanel extends JPanel {
  // instance vars
  CnLGame game;
  JButton spinButton = new JButton("SPIN!!!");
  String[] currentQ = new String[2];
  JLabel feedbackSpin;
  JLabel labelQuestion;
  JTextField playerAnswer = new JTextField();
  JButton submitAnswer = new JButton("submit");
  JLabel feedbackJudgement;
  JLabel feedbackPosition;
  JLabel feedbackType;
  JLabel feedbackSecondaryPosition;
  JPanel gamePanel;
  JPanel boardPanel;
  JPanel interactions;
  JPanel judgementPanel;
  JButton okayButton = new JButton("Okay");
  
  int boardPosition;
  int spin;
  
  String answer;
  
  JButton questionSubmit;
  
  // constructor that takes in cnl game, adds each panel using the functions below
  
  
  public MainPanel(CnLGame game) {
    this.game = game;
    setLayout(new BorderLayout(10,10));
    // welcome GUI builds the game up
    welcomeScreen();
    
    // create the rest of the game and launch (?) it
    
    // create image icons
    // create labels
    // add panels
    //      add(makePanel(), BorderLayout.NORTH);
    add(makeTitlePanel(), BorderLayout.NORTH);
    boardPanel = makeBoardPanel();
    add(boardPanel, BorderLayout.WEST);
    add(makeRightPanel(), BorderLayout.EAST);
    add(makeBottomPanel(), BorderLayout.SOUTH);
    
  }
  
  
  public void welcomeScreen() {
    // welcome screen has to pop up: with a bunch of buttons and text fields, drop down menu
    // our game isn't made yet at this point, so we have to collect info from the player and 
    // edit the game
    // ex: game.setPlayer(playerName) game.chooseToken(player, token)
  }
  
  private JPanel makeTitlePanel(){
    JPanel titlePanel = new JPanel();
    JLabel title = new JLabel("Chutes N Ladders!");
    titlePanel.add(title);
    return titlePanel;
  }
  
  private JPanel makeBoardPanel(){
  
JPanel board = new JPanel();
    board.setLayout (new GridLayout(8,8));
   
//    int position = ;

    int[] fileNameToIndexArray = new int[] {
      57,58,59,60,61,62,63,64,
      56,55,54,53,52,51,50,49,
      41,42,43,44,45,46,47,48,
      40,39,38,37,36,35,34,33,
      25,26,27,28,29,30,31,32,
      24,23,22,21,20,19,18,17,
      9,10,11,12,13,14,15,16,
      8,7,6,5,4,3,2,1};
      
    
    int index = fileNameToIndexArray[boardPosition];
    
    
    for (int i=1; i<10; i++) {
      
        if (i != index){
          String fileName = ("image_part_00" + i + ".jpg");
          ImagePanel img = new ImagePanel(fileName);
          board.add(img);
        }
        else {
        ImagePanel img = new ImagePanel( "circle.jpg");
    board.add(img);
        }
      }
    
    
    for (int i=10; i<65; i++) {
      
        if (i != index){
          String fileName = ("image_part_0" + i + ".jpg");
          ImagePanel img = new ImagePanel(fileName);
          board.add(img);
        }
        else {
        ImagePanel img = new ImagePanel( "circle.jpg");
    board.add(img);
        }
      }

    return board; 
  }
  
  private JTabbedPane makeRightPanel(){
    // make tabbed pane
    JTabbedPane tabbedPane = new JTabbedPane();
    tabbedPane.setPreferredSize(new Dimension(350, 190));
    
    
    // make gamePanel tab   
    gamePanel = new JPanel();      
//        JLabel gamePanelName = new JLabel("");
//        gamePanelName.setHorizontalAlignment(JLabel.CENTER);
    gamePanel.setLayout(new GridLayout(4,1));
//        gamePanel.add(gamePanelName);
    
    // add gamePanel tab  
    tabbedPane.addTab("Game Play", gamePanel);
    tabbedPane.setMnemonicAt(0, KeyEvent.VK_1);
    
    
    // make statsPanel tab
    JPanel statsPanel = new JPanel();
//        JLabel statsPanelName = new JLabel("Game Stats");
//        statsPanelName.setHorizontalAlignment(JLabel.CENTER);
    statsPanel.setLayout(new GridLayout(10, 3));
//        statsPanel.add(statsPanelName);
    
    // add statsPanel tab
    tabbedPane.addTab("Game Stats", statsPanel);
    tabbedPane.setMnemonicAt(0, KeyEvent.VK_1);
    
    //adding compenents to gamePanel tab
    
    
    //create and add spinner icon
    ImageIcon spinnerIcon = new ImageIcon(new ImageIcon("spinner1.jpg").getImage().getScaledInstance(250, 250, Image.SCALE_DEFAULT));
    
    JLabel spinnerImage = new JLabel();
    spinnerImage.setIcon(spinnerIcon);
    gamePanel.add(spinnerImage);
    
    //define and add spin button
    spinButton.addActionListener(new ButtonListener());
    gamePanel.add("spinner", spinButton);
    
    // interactions
    interactions = new JPanel();
//        interactions.setPreferredSize(new Dimension(190, 190));
//    interactions.setLayout(new GridLayout(3,1));
    gamePanel.add(interactions);
    
    // judgementPanel
    judgementPanel = new JPanel();
//        tabbedPane.setPreferredSize(new Dimension(100, 190));
//    judgementPanel.setLayout(new GridLayout(3,1));
    gamePanel.add(judgementPanel);
    
    
    
    
    
    feedbackSpin = new JLabel("");
    labelQuestion = new JLabel("");
    playerAnswer.setColumns(8);
//    submitAnswer = new JButton("submit");
    submitAnswer.addActionListener(new ButtonListener());
    feedbackJudgement = new JLabel("");
    feedbackPosition = new JLabel("");
    feedbackType = new JLabel("");
    feedbackSecondaryPosition = new JLabel("");
//    okayButton = new JButton("okay!");
    okayButton.addActionListener(new ButtonListener());
    
    
    
    
    return tabbedPane;
  }
  
  
  /** 
   * Creates and returns an ImageIcon out of an image file.
   * @param path The path to the imagefile relevant to the current file.
   * @param description A short description to the image.
   * @return ImageIcon An ImageIcon, or null if the path was invalid. 
   */
  private static ImageIcon createImageIcon(String path, String description) {
    java.net.URL imgURL = MainPanel.class.getResource(path);
    if (imgURL != null) {
      return new ImageIcon(imgURL, description);
    } else {
      System.err.println("Couldn't find file: " + path);
      return null;
    }
  }
  
  
  private JPanel makeBottomPanel(){
    // this panel should have a much more complicated structure
    JPanel bottomPanel = new JPanel();
    JLabel bottomLabel = new JLabel("Here is where we will have info abt what type of piece the player landed on");
    bottomPanel.add(bottomLabel);
    return bottomPanel;
  }
  
  class ButtonListener implements ActionListener {
    public void actionPerformed(ActionEvent event) {
      
      if (event.getSource() == spinButton) {
        spinButton.setEnabled(false);
        interactions.validate();
        judgementPanel.validate();
        interactions.repaint();
        judgementPanel.repaint();
        spin = game.spin();
        System.out.println(spin);
        
        // should all happen in a different panel
        currentQ = game.askQuestion();
        interactions.add(feedbackSpin);
        feedbackSpin.setText("You spun a " + spin + "!");
        
        interactions.add(labelQuestion);
        labelQuestion.setText("Your question is: " + currentQ[0]);
        
        interactions.add(playerAnswer);
        interactions.add(submitAnswer);
        
        gamePanel.revalidate(); // refreshes
        
        if (game.gameOver()) {
          
          System.out.println("game over");
        }
      }
      if (event.getSource() == submitAnswer) {
        submitAnswer.setEnabled(false);

        
        answer = playerAnswer.getText();
        playerAnswer.setText("");
                interactions.validate();
        judgementPanel.validate();
        interactions.repaint();
        judgementPanel.repaint();
        

        
        
        
        judgementPanel.add(feedbackJudgement);
        judgementPanel.add(feedbackPosition);
        judgementPanel.add(feedbackType);
        judgementPanel.add(feedbackSecondaryPosition);
        judgementPanel.add(okayButton);
        
        boolean correct = game.checkQuestion(currentQ, answer);
        if (correct) {
          feedbackJudgement.setText("you got it right!");
          int position = game.moveToken(correct);
          feedbackPosition.setText("You are now at tile " + position);
          String type = game.getType(position);
          int newPosition = game.secondaryMoveToken(position);
          String s = "";
          if (!type.equals("normal")) {
            s = " so you are now on tile " + boardPosition + ".";
          }
          else {
            s = ".";
          }
          feedbackType.setText("Tile " + position + " is a " + type + " tile " + s);
          judgementPanel.validate();
          boardPosition = game.getCurrentPosition();
          
          JPanel boardPanel2 = makeBoardPanel();
          remove(boardPanel);
          add(boardPanel2, BorderLayout.WEST);
//          add(boardPanel, BorderLayout.WEST);
          boardPanel.validate();
          
          boardPanel.repaint();
          
          
          
        }
        else {
          feedbackJudgement.setText("You got it wrong. Spin again.");
          judgementPanel.remove(feedbackPosition);
        }
        

        
      }
      if (event.getSource() == okayButton) {
        interactions.removeAll();
        judgementPanel.removeAll();
        spinButton.setEnabled(true);
        submitAnswer.setEnabled(true);
        
        interactions.validate();
        judgementPanel.validate();
        interactions.repaint();
        judgementPanel.repaint();
      }
      
      
    }
    
    private void resetGUIandGame() {
      
    }
    
  }
}